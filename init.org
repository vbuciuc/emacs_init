#+Title: My org init file. [WIP]

* Loading this file

Add to emacs init file:

#+BEGIN_SRC elisp
(org-babel-load-file "~/emacs_init/init.org")
#+END_SRC

* Setup
:PROPERTIES:
:header-args: :tangle yes
:END:

** Package management

*** Package repositories

#+NAME: package_repos
#+BEGIN_SRC elisp
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                    ("org" . "http://orgmode.org/elpa/")
                    ("melpa" . "http://melpa.org/packages/")
                    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa" . 1)))
#+END_SRC

*** Use package

#+NAME: use_package
#+BEGIN_SRC elisp
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC 

* Stable 
:PROPERTIES:
:header-args: :tangle yes
:END:

Stable stuff shouldn't change too often.

** Exec Path from Shell

Ensures that some env vars are copied from the parent shell.

#+NAME: exec_path
#+BEGIN_SRC elisp
  (setq exec-path-from-shell-variables (quote ("PATH" "MANPATH" "GOPATH")))
  (exec-path-from-shell-initialize)
#+END_SRC

** Magit

Magit is ___THE___ git interface

#+BEGIN_SRC elisp
(use-package magit
  :ensure t
  :pin melpa-stable
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** Projectile

#+NAME: projectile
#+BEGIN_SRC elisp
(use-package projectile
  :ensure t
  :init   (setq projectile-use-git-grep t)
  :config
  (projectile-mode t)
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action 'projectile-dired)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  :bind   (("s-f" . projectile-find-file)
           ("s-F" . projectile-grep)))
#+END_SRC

*** Projectile makes tramp slow

#+BEGIN_SRC elisp
(defadvice projectile-project-name (before projectile-project-name-on-tramp activate)
  (if (tramp-tramp-file-p default-directory)
      (setq-local projectile-project-name "TrampRemote")
    )
  )
#+END_SRC

** Yasnippet

Snippets organized per mode.

#+BEGIN_SRC elisp
(use-package yasnippet
  :diminish yas-minor-mode
  :commands yas-minor-mode
  :config
  (yas-reload-all)
  (yas-load-directory "~/work/tools/yasnippet-snippets")
  )
#+END_SRC

** Company mode

Autocompetion engine.

#+NAME: company_mode
#+BEGIN_SRC elisp
(use-package company
  :diminish company-mode
  :init
  (setq
   company-dabbrev-ignore-case nil
   company-dabbrev-code-ignore-case nil
   company-dabbrev-downcase nil
   company-minimum-prefix-length 2)
  :config
  (global-company-mode t)
  (global-set-key (kbd "s-SPC") 'company-complete))
#+END_SRC

*** Company quick-help

Company quick help displays docs for completion candidates.

#+NAME: company_quick_help
#+BEGIN_SRC elisp
(use-package company-quickhelp
  :ensure t
  :config
  (add-hook 'company-mode-hook (lambda () (company-quickhelp-mode 1))))
#+END_SRC

** Async

#+BEGIN_SRC elisp
(use-package async
  :ensure t
  :config
  (add-hook 'dired-mode-hook (lambda () (dired-async-mode 1))))
#+END_SRC

** Flycheck

#+BEGIN_SRC 
(use-package flycheck
  :ensure t)
#+END_SRC

* Incubating

** Language server for java
:PROPERTIES:
:header-args: :tangle yes
:END:

*** Placeholder
#+BEGIN_SRC elisp :tangle yes
  (print "Nothing")
#+END_SRC

*** Client install

**** lsp-mode

 #+BEGIN_SRC elisp
   (use-package lsp-mode
     :ensure t
     :demand t
     :init (setq lsp-inhibit-message nil ; you may set this to t to hide messages from message area
		 lsp-eldoc-render-all nil
		 lsp-highlight-symbol-at-point nil))
 #+END_SRC

 #+RESULTS:

**** company-lsp

 #+BEGIN_SRC elisp
 (use-package company-lsp
   :after  company
   :ensure t
   :config
   (add-hook 'java-mode-hook (lambda () (push 'company-lsp company-backends)))
   (setq company-lsp-enable-snippet t
         company-lsp-cache-candidates t))
 #+END_SRC

 #+RESULTS:
 : t


**** lsp-ui
 #+BEGIN_SRC elisp
 (use-package lsp-ui
   :ensure t
   :demand t
   :config
   (setq lsp-ui-sideline-enable t
         lsp-ui-sideline-show-symbol t
         lsp-ui-sideline-show-hover t
         lsp-ui-sideline-show-code-actions t
         lsp-ui-sideline-update-mode 'point))
 #+END_SRC

 #+RESULTS:
 : t

**** Lsp java

 #+BEGIN_SRC elisp
    (use-package lsp-java
      :ensure t
      :config
      ;; add lombok as agent for eclipse jdt
      (setq lsp-java-vmargs
	       (quote("-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication" "-javaagent:/home/vibu/.java/lib/lombok/1.18.2/lombok.jar")))
      (add-hook 'java-mode-hook 'lsp-java-enable)
      (add-hook 'java-mode-hook  'flycheck-mode)
      (add-hook 'java-mode-hook  'company-mode)
      (add-hook 'java-mode-hook  (lambda () (lsp-ui-flycheck-enable t)))
      (add-hook 'java-mode-hook  'lsp-ui-sideline-mode)
      (setq lsp-java--workspace-folders (list "/home/vibu/work/apigov/api-traceability-connector/service/service-rest" "/home/vibu/work/apigov/mgw-controller/business/business-model")))
 #+END_SRC

 #+RESULTS:
 : t

** Golang
:PROPERTIES:
:header-args: :tangle yes
:END:

Autocompletion

#+BEGIN_SRC elisp
(use-package company-go
  :ensure t)
#+END_SRC

#+BEGIN_SRC elisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook `go-mode-hook (lambda ()
			      (push "/home/vibu/work/go/bin" exec-path) ;; make sure this is in path
			      (setq-local company-backends (list (list 'company-go 'company-yasnippet)))
			      (add-hook `before-save-hook `gofmt-before-save) ;;; gofmt before save
			      (flycheck-mode)
			      (local-set-key (kbd "M-.") 'godef-jump)
			      (local-set-key (kbd "M-*") 'pop-tag-mark)
			      (local-set-key (kbd "M-p") 'compile)            ; Invoke compiler
			      (local-set-key (kbd "M-P") 'recompile)          ; Redo most recent compile cmd
			      (setq company-idle-delay 0)
			      (setq gofmt-command "goimports")
			      (go-guru-hl-identifier-mode) 
			      )
	      )
    )
#+END_SRC

#+BEGIN_SRC elisp
  (use-package ob-go
    :ensure t)
#+END_SRC

#+BEGIN_SRC elisp
(use-package go-rename
  :ensure t)
#+END_SRC

#+BEGIN_SRC elisp
(use-package go-guru
  :ensure t)
#+END_SRC

Gotest

#+BEGIN_SRC elisp
(use-package gotest
:ensure t)
#+END_SRC

Gometalinter

#+BEGIN_SRC elisp
    (use-package flycheck-gometalinter
      :ensure t
      :config
      (progn
	(setq flycheck-gometalinter-vendor t)
	(setq flycheck-gometalinter-fast t)
	(flycheck-gometalinter-setup)))
#+END_SRC

Go snippets

#+BEGIN_SRC elisp
  (use-package go-snippets
    :ensure t)
#+END_SRC

** Flycheck pos tip

:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC elisp
  (use-package flycheck-pos-tip
  :ensure t
  :config 
  (add-hook 'flycheck-mode-hook (lambda ()
				  (flycheck-pos-tip-mode)
				  ))
  )
#+END_SRC
