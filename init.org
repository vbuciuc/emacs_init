#+Title: My org init file. [WIP]

* Loading this file

Add to emacs init file:

#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/emacs_init/init.org")
#+END_SRC


* Setup
:PROPERTIES:
:header-args: :tangle yes
:END:

** Use spaces by default

#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil)
#+END_SRC

** Package management


*** Set up packages

Repositories for packages.

#+NAME: package_repos
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                    ("org" . "http://orgmode.org/elpa/")
                    ("melpa" . "http://melpa.org/packages/")
                    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa" . 1)))
(package-initialize)
#+END_SRC

*** Use package

Use package is used to install all the other packages.

#+NAME: use_package
#+BEGIN_SRC emacs-lisp
(when (not package-archive-contents)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

** Font lock mode

Enables font lock mode (syntax highlighting in all buffers).

#+NAME: font_lock_mode
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
#+END_SRC

** Default browser

o#+name: default_browser
#+begin_src emacs-lisp
(setq browse-url-browser-function `browse-url-chrome)
#+end_src

** Save backups in tmp dir

#+name backup_in_tmp
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

** Theme

#+begin_src emacs-lisp :tangle yes
  (load-theme 'tango-dark)
#+end_src

** Disable toolbar and menu

#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

* Stable
:PROPERTIES:
:header-args: :tangle yes
:END:

Stable stuff shouldn't change too often.

** Company mode

Company mode is a completion framework.

*** Install company mode

#+name: install company mode
#+begin_src emacs-lisp :tangle yes
(use-package company
;; don't show compay-mode in modeline
  :diminish company-mode
  :init
  (setq
   company-dabbrev-ignore-case nil
   company-dabbrev-code-ignore-case nil
   company-dabbrev-downcase nil
   company-minimum-prefix-length 2)
  :config
  (global-company-mode t)
  (global-set-key (kbd "s-SPC") 'company-complete))
#+end_src

*** Fuzzy matching in company mode: company-flx

#+name: company-flx
#+begin_src emacs-lisp :tangle yes
(use-package company-flx
  :ensure t
  :config
  (add-hook `global-company-mode-hook 'company-flx-mode)
  )
#+end_src

*** Documentation on completion candidates: company-quickhelp

#+name: compaby-quickhelp
#+begin_src emacs-lisp :tangle yes
(use-package company-quickhelp
  :ensure t
  :config
  (add-hook 'company-mode-hook (lambda () (company-quickhelp-mode 1))))
#+end_src

** Ido

Ido is a completion framework for minibuffer (ex: finding files, switching buffer)

*** Install flx-ido

Flx ido brings fuzzy matching to ido.

#+name: ido
#+begin_src emacs-lisp :tangle yes
(use-package flx-ido
  :ensure t
  :demand
  :init
  (setq
   ido-enable-flex-matching t
   ;; C-d to open directories
   ;; C-f to revert to find-file
   ido-show-dot-for-dired t
   ido-enable-dot-prefix t)
  :config
  (ido-mode 1)
  (ido-everywhere 1)
  (flx-ido-mode 1)
  :custom
  (flx-ido-threshold 20000 "Increase ido threshold")
  )
#+end_src

*** Ido vertical

Display ido results vertically

#+name: ido-vertical
#+begin_src emacs-lisp :tangle yes
(use-package ido-vertical-mode
  :ensure t
  :config
  (ido-vertical-mode 1))
#+end_src

*** Ido occur

Occur in minibuffer

#+name: ido-occur
#+begin_src emacs-lisp :tangle yes
(use-package ido-occur
  :ensure t
  :bind ("s-o" . ido-occur))
#+end_src

*** Ido completing read plus

#+name: ido-completing-read+
#+begin_src emacs-lisp :tangle yes
(use-package ido-completing-read+
  :ensure t
  :config
  (ido-ubiquitous-mode))
#+end_src

** Smex

#+name: smex
#+begin_src emacs-lisp :tangle yes
(use-package smex
  :ensure t
  :bind
  ("M-x" . 'smex)
  ("M-X" . 'smex-major-mode-commands)
  ("C-c C-c M-x" . 'execute-extended-command))
#+end_src

** Exec Path from Shell

Ensures that some env vars are copied from the parent shell.

#+NAME: exec_path
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
 :ensure t
 :config
  (setq exec-path-from-shell-variables (quote ("PATH" "MANPATH" "GOPATH")))
  (exec-path-from-shell-initialize))
#+END_SRC

** Git
*** Git link

Git link generates links to git origin.

#+begin_src emacs-lisp :tangle yes
  (use-package git-link
    :ensure t
    :custom
    (git-link-remote-alist
     (quote
      (("github" git-link-github)
       ("bitbucket" git-link-bitbucket)
       ("gitorious" git-link-gitorious)
       ("gitlab" git-link-gitlab)
       ("git.ecd.axway.int" git-link-gitlab)))))
#+end_src

*** Global git gutter

#+begin_src emacs-lisp :tangle no
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 1))
#+end_src

*** Magit

Magit is ___THE___ git interface

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** Projectile

#+NAME: projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init   (setq projectile-use-git-grep t)
    :config
    (projectile-mode t)
    (setq projectile-enable-caching t)
    (setq projectile-switch-project-action 'projectile-dired)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :bind   (("s-f" . projectile-find-file)
	     ("s-F" . projectile-grep))
    :custom
    (projectile-project-root-files-bottom-up
     (quote
      ("pom.xml" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs" ".projectile"))))
#+END_SRC

*** Projectile makes tramp slow

#+BEGIN_SRC emacs-lisp
(defadvice projectile-project-name (before projectile-project-name-on-tramp activate)
  (if (tramp-tramp-file-p default-directory)
      (setq-local projectile-project-name "TrampRemote")
    )
  )
#+END_SRC

*** Projectile ibuffer support

#+name: ibuffer-projectile
#+begin_src emacs-lisp :tangle yes
(use-package ibuffer-projectile
  :ensure t)
#+end_src

** Yasnippet

Snippets organized per mode.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :commands yas-minor-mode
  :config
  (yas-reload-all)
  )
#+END_SRC

** Async

#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :config
  (add-hook 'dired-mode-hook (lambda () (dired-async-mode 1))))
#+END_SRC

** Flycheck

#+BEGIN_SRC
(use-package flycheck
  :ensure t)
#+END_SRC

** Http

#+begin_src emacs-lisp :tangle yes
(use-package http
  :ensure t)
(use-package ob-http
  :ensure t)
#+end_src

** JQ

#+name: jq-mode
#+begin_src emacs-lisp :tangle yes
(use-package jq-mode
  :init
  (require 'ob-jq)
  :ensure t)
#+end_src

** Kubernetes

#+begin_src emacs-lisp :tangle yes
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview)
    :custom
    (kubernetes-poll-frequency 3600)
    (kubernetes-redraw-frequency 3600)
    )

  (use-package kubernetes-tramp
    :ensure t)
#+end_src
** Yaml

Lint yaml with flycheck

#+name: flycheck-yamllint
#+begin_src emacs-lisp :tangle yes
(use-package flycheck-yamllint
  :ensure t
  :defer t
  :init
  (progn
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))
#+end_src

** Shell mode

#+name: bash-comppletion
#+begin_src emacs-lisp :tangle yes
  (use-package bash-completion
    :ensure t
    :config
    (defun my-shell-hook ()
      (progn
	(yas-minor-mode t)
	(if (tramp-tramp-file-p default-directory)
	    (progn
	      (message "Detected tramp shell!")
	      (setq-local company-backends (list 'company-yasnippet))
	      (setq-local bash-completion-enabled nil))
	  (setq-local company-backends (list (list 'company-capf 'company-yasnippet)))
	  (setq-local company-idle-delay nil)
	  )
	))
    (add-hook 'shell-mode-hook #'my-shell-hook)
    (bash-completion-setup)
    )
#+end_src

** Org mode


*** Org bullets

#+name: org-bullets
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

*** Completion

Company mode in org, disable pcomplete.

#+begin_src emacs-lisp :tangle yes
(defun my-org-mode-hook ()
  (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
(add-hook 'org-mode-hook #'my-org-mode-hook)
(add-hook 'org-mode-hook (lambda () (setq-local company-backends (list 'company-capf 'company-yasnippet))))
#+end_src

*** Babel

**** Tangle on save

#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle nil t)))
#+end_src

**** Languages

***** Install ob-restclient

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ob-restclient
    :ensure t)
#+END_SRC

***** Setup plantuml

Plantuml is a tool that's installed as a standalone application.

#+NAME: install-plant-uml :tangle no
#+BEGIN_SRC bash :dir /sudo:root@localhost:/root
  apt-get install plantuml
#+END_SRC

Org mode needs the path to the plantuml jar.

#+NAME: plantuml-jar-path
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
#+END_SRC

#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell      . t)
   (js         . t)
   (ditaa      . t)
   (emacs-lisp . t)
   (perl       . t)
   (clojure    . t)
   (python     . t)
   (ruby       . t)
   (dot        . t)
   (css        . t)
   (sql        . t)
   (screen     . t)
   (plantuml   . t)
   (restclient   . t)
   (org        . t)
   (http       . t)
   (groovy     . t)
   (jq         . t)))
#+end_src

**** Settings

#+begin_src emacs-lisp :tangle yes
(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t)
#+end_src

**** Async

#+begin_src emacs-lisp :tangle yes
(use-package ob-async
  :ensure t)
#+end_src

*** Capture

**** Install

#+begin_src emacs-lisp :tangle yes
(use-package org-capture
  :bind
  ("C-c c" . 'org-capture))
#+end_src

**** Templates

#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/.org/gtd.org" "Tasks")
	 "* TODO %?\n  %i\n  %a")
	("j" "Journal" entry (file+olp+datetree "~/.org/journal.org")
	 "* %?\nEntered on %U\n  %i\n  %a")
	("s" "Code Snippet" entry
	 (file "~/.org/snippets.org")
	 ;; Prompt for tag and language
	 "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")))
#+end_src


* Incubating

** GPG

GPG for keeping secrets.
[[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Guide]]

*** External setup

***** Generate a key

#+begin_src bash
  gpg --gen-key
#+end_src

*** Set up authsource files

#+begin_src emacs-lisp :tangle yes
(setq auth-sources
 '((:source "~/.emacs.d/secrets/.authinfo.gpg")))
#+end_src

** Org jira

#+begin_src emacs-lisp :tangle yes
  (setq jiralib-url "https://techweb.axway.com/jira")
#+end_src

** Forge

Forge integrates magit with gitlab and github.

#+begin_src emacs-lisp :tangle yes
    (use-package forge
      :ensure t
      :config
      (setq forge-alist (cons '("git.ecd.axway.int" "git.ecd.axway.int/api/v4" "git.ecd.axway.int" forge-gitlab-repository) forge-alist)))
#+end_src

*** Git secret



** Language server for java
:PROPERTIES:
:header-args: :tangle yes
:END:

*** Placeholder
#+BEGIN_SRC emacs-lisp :tangle yes
  (print "Nothing")
#+END_SRC

*** Client install

**** treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t)
#+END_SRC

**** lsp-mode

 #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
     :ensure t
     :demand t
     :init (setq lsp-inhibit-message nil ; you may set this to t to hide messages from message area
		 lsp-eldoc-render-all nil
	         lsp-prefer-flymake nil
		 lsp-highlight-symbol-at-point nil))
 #+END_SRC

#+begin_src emacs-lisp :tangle yes
(use-package lsp-treemacs
 :ensure t)
#+end_src

**** company-lsp

 #+BEGIN_SRC emacs-lisp
 (use-package company-lsp
   :after  company
   :ensure t
   :config
   (add-hook 'java-mode-hook (lambda () (push 'company-lsp company-backends)))
   (setq company-lsp-enable-snippet t
         company-lsp-cache-candidates t))
 #+END_SRC

**** lsp-ui
 #+BEGIN_SRC emacs-lisp
 (use-package lsp-ui
   :ensure t
   :demand t
   :config
   (setq lsp-ui-sideline-enable t
         lsp-ui-sideline-show-symbol t
         lsp-ui-sideline-show-hover t
         lsp-ui-sideline-show-code-actions t
         lsp-ui-sideline-update-mode 'point))
 #+END_SRC

**** Lsp java

 #+BEGIN_SRC emacs-lisp
    (use-package lsp-java
      :ensure t
      :config
      ;; add lombok as agent for eclipse jdt
      (setq lsp-java-vmargs
	       (quote("-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication" "-javaagent:/home/vibu/.java/lib/lombok/1.18.2/lombok.jar")))
      (add-hook 'java-mode-hook #'lsp))
 #+END_SRC

**** Dap mode

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))

  (use-package dap-java
    :after (lsp-java))
#+END_SRC

** Golang

Autocompletion

#+BEGIN_SRC emacs-lisp
(use-package company-go
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-mode
    :ensure t
    :config
    (add-hook `go-mode-hook (lambda ()
			      (push "/home/vibu/work/go/bin" exec-path) ;; make sure this is in path
			      ;; (setq-local company-backends (list (list 'company-go 'company-yasnippet)))
			      (add-hook `before-save-hook `gofmt-before-save) ;;; gofmt before save
			      ;; (flycheck-mode)
			      ;; (local-set-key (kbd "M-.") 'godef-jump)
			      ;; (local-set-key (kbd "M-*") 'pop-tag-mark)
			      (local-set-key (kbd "M-p") 'compile)            ; Invoke compiler
			      (local-set-key (kbd "M-P") 'recompile)          ; Redo most recent compile cmd
			      (setq company-idle-delay 0)
			      (setq gofmt-command "goimports")
			      (lsp)
			      ;;(go-guru-hl-identifier-mode)
			      )
	      )
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ob-go
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-rename
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-guru
  :ensure t)
#+END_SRC

Gotest

#+BEGIN_SRC emacs-lisp
  (use-package gotest
    :ensure t)
#+END_SRC

Gometalinter

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-gometalinter
    :ensure t
    :config
    (setq flycheck-gometalinter-vendor t)
    (setq flycheck-gometalinter-fast t)
    (flycheck-gometalinter-setup))
#+END_SRC

Go snippets

#+BEGIN_SRC emacs-lisp
  (use-package go-snippets
    :ensure t)
#+END_SRC

** Flycheck pos tip

:PROPERTIES:
:header-args: :tangle yes
:END:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pos-tip
  :ensure t
  :config
  (add-hook 'flycheck-mode-hook (lambda ()
				  (flycheck-pos-tip-mode)
				  ))
  )
#+END_SRC
** Protobufs

#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :ensure t
    )
#+END_SRC
** Ejira

#+begin_src emacs-lisp :tangle yes
  (use-package language-detection
    :ensure t)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package ejira
  :load-path "~/.emacs.d/cloned/ejira"
  :ensure    nil
  :init
  (setq jiralib2-url             "https://techweb.axway.com/jira"
        jiralib2-user-login-name "vbuciuc"
        ejira-projects           '("APIGOV")
        ejira-main-project       "APIGOV"
        ejira-my-org-directory   "~/org/jira/"
        ejira-done-states        '("Done")
        ejira-in-progress-states '("In Progress" "In Review" "Testing")
        ejira-high-priorities    '("High" "Highest")
        ejira-low-priorities     '("Low" "Lowest")
        ejira-sprint-field                     'customfield_11730
        ejira-epic-field                       'customfield_11731))
#+end_src
** Jsonnet

#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package jsonnet-mode
    :ensure t)
#+END_SRC
** Org agenda

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files (list "~/.org/personal.org" "~/.org/work.org" "~/.org/gtd.org"))
#+END_SRC

** Org refile

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-use-outline-path 'file)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC
